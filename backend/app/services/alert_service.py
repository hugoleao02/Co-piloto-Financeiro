from sqlalchemy.orm import Session
from datetime import datetime, timedelta
from typing import List
from app.models.alert import Alert, AlertType, AlertStatus
from app.models.strategy import UserStrategy
from app.models.stock import Stock
from app.models.user import User
from app.services.scoring_engine import ScoringEngine

class AlertService:
    def __init__(self, db: Session):
        self.db = db
        self.scoring_engine = ScoringEngine(db)
    
    def check_strategy_alerts(self, user: User) -> List[Alert]:
        """
        Verifica se alguma a√ß√£o atende aos crit√©rios das estrat√©gias do usu√°rio
        e cria alertas se necess√°rio
        """
        alerts_created = []
        
        # Buscar estrat√©gias ativas do usu√°rio com notifica√ß√µes habilitadas
        strategies = self.db.query(UserStrategy).filter(
            UserStrategy.user_id == user.id,
            UserStrategy.is_active == True,
            UserStrategy.is_notification_enabled == True
        ).all()
        
        if not strategies:
            return alerts_created
        
        # Buscar todas as a√ß√µes
        stocks = self.db.query(Stock).all()
        
        for strategy in strategies:
            # Verificar se j√° existe um alerta recente para esta estrat√©gia
            recent_alert = self.db.query(Alert).filter(
                Alert.user_id == user.id,
                Alert.strategy_id == strategy.id,
                Alert.alert_type == AlertType.STRATEGY_MATCH,
                Alert.created_at >= datetime.now() - timedelta(hours=24)  # Evitar spam
            ).first()
            
            if recent_alert:
                continue
            
            # Aplicar a estrat√©gia personalizada
            qualified_stocks = self.scoring_engine.apply_custom_strategy(stocks, strategy)
            
            if qualified_stocks:
                # Criar alerta para a primeira a√ß√£o que atende aos crit√©rios
                top_stock = qualified_stocks[0]
                
                alert = Alert(
                    user_id=user.id,
                    strategy_id=strategy.id,
                    stock_id=top_stock.id,
                    alert_type=AlertType.STRATEGY_MATCH,
                    title=f"üéØ Nova oportunidade na estrat√©gia '{strategy.name}'",
                    message=f"A a√ß√£o {top_stock.ticker} ({top_stock.name}) atende aos crit√©rios da sua estrat√©gia '{strategy.name}'. Score: {top_stock.final_score:.1f}/10",
                    stock_ticker=top_stock.ticker,
                    stock_name=top_stock.name,
                    current_price=f"R$ {top_stock.current_price:.2f}" if top_stock.current_price else None,
                    score=f"{top_stock.final_score:.1f}" if top_stock.final_score else None,
                    status=AlertStatus.PENDING
                )
                
                self.db.add(alert)
                alerts_created.append(alert)
        
        self.db.commit()
        return alerts_created
    
    def check_score_alerts(self, user: User) -> List[Alert]:
        """
        Verifica se alguma a√ß√£o atingiu um score alto e cria alertas
        """
        alerts_created = []
        
        # Buscar a√ß√µes com score alto (>= 8.0) que n√£o foram alertadas recentemente
        high_score_stocks = self.db.query(Stock).filter(
            Stock.final_score >= 8.0,
            Stock.is_qualified == True
        ).all()
        
        for stock in high_score_stocks:
            # Verificar se j√° existe um alerta recente para esta a√ß√£o
            recent_alert = self.db.query(Alert).filter(
                Alert.user_id == user.id,
                Alert.stock_id == stock.id,
                Alert.alert_type == AlertType.SCORE_ALERT,
                Alert.created_at >= datetime.now() - timedelta(days=7)  # Evitar spam
            ).first()
            
            if recent_alert:
                continue
            
            alert = Alert(
                user_id=user.id,
                stock_id=stock.id,
                alert_type=AlertType.SCORE_ALERT,
                title=f"‚≠ê A√ß√£o com score excelente: {stock.ticker}",
                message=f"A a√ß√£o {stock.ticker} ({stock.name}) atingiu um score de {stock.final_score:.1f}/10! Considere analisar esta oportunidade.",
                stock_ticker=stock.ticker,
                stock_name=stock.name,
                current_price=f"R$ {stock.current_price:.2f}" if stock.current_price else None,
                score=f"{stock.final_score:.1f}",
                status=AlertStatus.PENDING
            )
            
            self.db.add(alert)
            alerts_created.append(alert)
        
        self.db.commit()
        return alerts_created
    
    def check_dividend_alerts(self, user: User) -> List[Alert]:
        """
        Verifica a√ß√µes com dividend yield alto e cria alertas
        """
        alerts_created = []
        
        # Buscar a√ß√µes com dividend yield >= 6% (crit√©rio de Bazin)
        high_dividend_stocks = self.db.query(Stock).filter(
            Stock.dividend_yield >= 6.0,
            Stock.is_qualified == True
        ).all()
        
        for stock in high_dividend_stocks:
            # Verificar se j√° existe um alerta recente para esta a√ß√£o
            recent_alert = self.db.query(Alert).filter(
                Alert.user_id == user.id,
                Alert.stock_id == stock.id,
                Alert.alert_type == AlertType.DIVIDEND_ALERT,
                Alert.created_at >= datetime.now() - timedelta(days=30)  # Evitar spam
            ).first()
            
            if recent_alert:
                continue
            
            alert = Alert(
                user_id=user.id,
                stock_id=stock.id,
                alert_type=AlertType.DIVIDEND_ALERT,
                title=f"üí∞ Alto dividend yield: {stock.ticker}",
                message=f"A a√ß√£o {stock.ticker} ({stock.name}) tem um dividend yield de {stock.dividend_yield:.1f}%! Atende ao crit√©rio de Bazin (6%).",
                stock_ticker=stock.ticker,
                stock_name=stock.name,
                current_price=f"R$ {stock.current_price:.2f}" if stock.current_price else None,
                score=f"{stock.final_score:.1f}" if stock.final_score else None,
                status=AlertStatus.PENDING
            )
            
            self.db.add(alert)
            alerts_created.append(alert)
        
        self.db.commit()
        return alerts_created
    
    def generate_all_alerts(self, user: User) -> List[Alert]:
        """
        Gera todos os tipos de alertas para o usu√°rio
        """
        all_alerts = []
        
        # Verificar alertas de estrat√©gia
        strategy_alerts = self.check_strategy_alerts(user)
        all_alerts.extend(strategy_alerts)
        
        # Verificar alertas de score
        score_alerts = self.check_score_alerts(user)
        all_alerts.extend(score_alerts)
        
        # Verificar alertas de dividend yield
        dividend_alerts = self.check_dividend_alerts(user)
        all_alerts.extend(dividend_alerts)
        
        return all_alerts
